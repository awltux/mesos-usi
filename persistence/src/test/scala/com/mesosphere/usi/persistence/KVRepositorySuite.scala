/*
 * This Scala Testsuite was generated by the Gradle 'init' task.
 */
package com.mesosphere.usi.persistence

import java.time.Instant

import akka.actor.ActorSystem
import akka.stream.ActorMaterializer
import akka.stream.scaladsl.{Keep, Sink}
import com.mesosphere.usi.core.models._
import com.mesosphere.usi.persistence.storageimpl.InMemoryStorageImpl
import org.junit.runner.RunWith
import org.scalatest.{BeforeAndAfterAll, Matchers, WordSpec}
import org.scalatest.concurrent.ScalaFutures
import org.scalatest.junit.JUnitRunner

@RunWith(classOf[JUnitRunner])
class KVRepositorySuite extends WordSpec with ScalaFutures with BeforeAndAfterAll with Matchers{

  implicit val system = ActorSystem("test")
  implicit val mat = ActorMaterializer()



  "KVRepository" should {
    "store and retrieve pod record" in new Fixture {
      repository.storePodRecord(podRecord).futureValue
      val storedRecords = repository.podRecords(fromSequenceNr = 0).toMat(Sink.seq)(Keep.right).run().futureValue

      storedRecords shouldEqual Seq(podRecord)
    }

    "store and retrieve reservation" in new Fixture {
      repository.storeReservationRecord(reservationRecord).futureValue
      val storedRecords = repository.reservationRecords(fromSequenceNr = 0).toMat(Sink.seq)(Keep.right).run().futureValue

      storedRecords shouldEqual Seq(reservationRecord)
    }
  }

  override protected def afterAll(): Unit = {
    system.terminate().futureValue
  }
}


class Fixture {
  val storage = new InMemoryStorageImpl

  val repository = new KVRepositoryImpl(storage)

  val instant = Instant.now()

  val podRecord = PodRecord(0, PodId("podID"), instant, Some(UnserviceableDetails(Unreachable, instant)))

  val reservationRecord = ReservationRecord(0, ReservationId("reservationID"), AgentId("agentId"), Resources(1,2,3,4))
}